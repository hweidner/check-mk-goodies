#!/usr/bin/python3

# (c) Harald Weidner, 2024-05-07
# License: MIT
#
# Checkmk local check
# The check displays the x86-64 level (v1-v4) of the system CPU.
# Based on information from this discussion:
# https://unix.stackexchange.com/questions/631217/how-do-i-check-if-my-cpu-supports-x86-64-v2
#
# example output:
# 0 "CPU x86-64 level" - x86_64 CPU level: x86-64-v3


CHECK = '"CPU x86-64 level"'

# minimum requirements for x86-64 levels
level1 = {'cmov', 'cx8', 'fpu', 'fxsr', 'lm', 'mmx', 'sse2', 'syscall'}
level2 = {'cx16', 'lahf_lm', 'popcnt', 'sse4_1', 'sse4_2', 'ssse3'}
level3 = {'abm', 'avx', 'avx2', 'bmi1', 'bmi2', 'f16c', 'fma', 'movbe', 'xsave'}
level4 = {'avx512bw', 'avx512cd', 'avx512dq', 'avx512f', 'avx512vl'}

# returns a set of cpuflags from /proc/cpuinfo
def getflags():
  prefix = "flags\t\t: "
  try:
    with open("/proc/cpuinfo", "r", encoding="utf-8") as infile:
      for line in infile:
        if line.startswith(prefix):
          line = line[len(prefix):-1]
          flags = set(line.split(" "))
          return flags
    return set({})
  except Exception:
    return set({})

# determines the CPU x86-64 level
def cpulevel(flags):
  if not flags.issuperset(level1): return 0
  elif not flags.issuperset(level2): return 1
  elif not flags.issuperset(level3): return 2
  elif not flags.issuperset(level4): return 3
  else: return 4

flags = getflags()
level = cpulevel(flags)

if level == 0:
  print(f"1 {CHECK} - No CPU x86_64 level detected.")
else:
  print(f"0 {CHECK} - CPU x86_64 level: x86-64-v{level}")
